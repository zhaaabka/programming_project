import telebot
from telebot import types
import ast
import random  # —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞
import datetime
from time import sleep, time
from functools import wraps

TOKEN = '1768268284:AAEmnrx9HHxjZgd6eDmmjgfKptnPAsHY6e0'

bot = telebot.TeleBot(TOKEN)

chat_id = 0
old_desc_rem_ind = 0
old_time_rem = 0
curr_reminder = ""
reminders = {}
reminders_time_list = []
thereminder = ""
curr_day = datetime.datetime.today() #—á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–ª–æ—Å—å, –∫–∞–∫–æ–π —Å–µ–π—á–∞—Å –≥–æ–¥
new = ''
deadlines_to_print = {} #–ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ñ–æ—Ä–º–∞—Ç –≥–≥–≥–≥-–¥–¥-–º–º, —á—Ç–æ –Ω–µ—É–¥–æ–±–Ω–æ, –∞ –ø–æ—Ñ–∏–∫—Å–∏—Ç—å –Ω–∞ —Å–∞–º–æ–º –≤—ã–≤–æ–¥–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É —Ç–∞–∫–∏–º –ø—É—Ç–µ–º –¥–µ–ª–∞–µ–º
look_tasks = {}
data_list = []  # –º–æ–∂–Ω–æ –∏ —Å–ª–æ–≤–∞—Ä—å —Ç–∏–ø–∞ {"–æ–ø–∏—Å–∞–Ω–∏–µ": –¥–∞–Ω–Ω—ã–µ, "–¥–µ–¥–ª–∞–π–Ω": –¥–∞–Ω–Ω—ã–µ, "–≤–∞–∂–Ω–æ—Å—Ç—å": –¥–∞–Ω–Ω—ã–µ} —Å–¥–µ–ª–∞—Ç—å, –Ω–æ –Ω—É–∂–Ω–æ –ª–∏?
image_list = [
    'https://images.unsplash.com/photo-1511044568932-338cba0ad803?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
    'https://images.unsplash.com/photo-1494256997604-768d1f608cac?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1101&q=80',
    'https://images.unsplash.com/photo-1536590158209-e9d615d525e4?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=334&q=80',
    'https://images.unsplash.com/photo-1568043210943-0e8aac4b9734?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
    'https://images.unsplash.com/photo-1589883661923-6476cb0ae9f2?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=967&q=80',
    'https://images.unsplash.com/photo-1522856339183-9a8b06b05937?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
    'https://images.unsplash.com/photo-1532386236358-a33d8a9434e3?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=978&q=80',
    'https://images.unsplash.com/photo-1526769928017-c444fdb08d5a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
    'https://images.unsplash.com/photo-1611936159858-53f9a17db6d0?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80',
    'https://images.unsplash.com/photo-1519052537078-e6302a4968d4?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1050&q=80']
# –ø–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–≤–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∫–æ—Ç–∞–º–∏
# —è –¥—É–º–∞—é, —Å—Ç–æ–∏—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –Ω–∞–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ + –¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ —Ç—É–¥–∞, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—å
thing = ''  # —Å—Ç–æ–∏—Ç –Ω–∞–∑–≤–∞—Ç—å —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫-—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ... —ç—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
thing2 = ''
thing3 = ''


def mult_threading(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""

    @wraps(func)
    def wrapper(*args_, **kwargs_):
        import threading
        func_thread = threading.Thread(target=func, args=tuple(args_), kwargs=kwargs_)
        func_thread.start()
        return func_thread

    return wrapper

@mult_threading
def send_rem():
    while True:
        for time_rem in reminders_time_list:
            curr_time = datetime.datetime.today()
            curr_time_str = "{}.{}.{} {}:{}".format(curr_time.day, curr_time.month, curr_time.year, curr_time.hour, curr_time.minute)
            print(curr_time_str, "-----", reminders[time_rem][1])
            if curr_time_str == reminders[time_rem][1]:
                for i in range(len(reminders[time_rem][0])):
                    to_print = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {}".format(reminders[time_rem][0][i])
                    bot.send_message(chat_id, text=to_print)
                    reminders[time_rem][0].remove(reminders[time_rem][0][i])
                    if len(reminders[time_rem][0]) == 0:
                        del reminders[time_rem]
                        reminders_time_list.remove(time_rem)

send_rem()

@bot.message_handler(commands=['start'])
def what_to_do(message):
    keyboard = types.ReplyKeyboardMarkup(True, True)
    keyboard.row('–ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–µ–ª–∞')
    keyboard.row('–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    bot.send_message(message.from_user.id, '–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def new(message, f=None):
    if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–µ–ª–∞':
        if len(look_tasks) == 0:
            bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–¥—ã—Ö–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ :)")
        else:
            keyboard2 = types.ReplyKeyboardMarkup(True, True)
            keyboard2.row('–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–µ–¥–ª–∞–π–Ω—É', '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏')
            keyboard2.row('–ù–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å')
            sort = bot.send_message(message.from_user.id, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–ª–∞?", reply_markup=keyboard2)
            bot.register_next_step_handler(sort, qstn)

    elif message.text == '–ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ':
        msg = bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–µ –¥–µ–ª–æ')
        bot.register_next_step_handler(msg, get_new)

    elif message.text == '–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
        msg = bot.send_message(message.from_user.id, '–û —á–µ–º –º–Ω–µ –Ω—É–∂–Ω–æ –í–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?')
        global chat_id
        chat_id = message.from_user.id
        bot.register_next_step_handler(msg, add_reminder)

    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        if len(reminders_time_list) == 0:
            bot.send_message(message.from_user.id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        else:
            for time in reminders_time_list:
                for i in reminders[time][0]:
                    keyboard = types.InlineKeyboardMarkup(row_width=1)
                    key_delete_rem = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=i + "del_rem")
                    key_edit_desc = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=i + "ed_desc_rem")
                    key_edit_time = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º—è', callback_data=i + "ed_time_rem")
                    keyboard.add(key_delete_rem, key_edit_desc, key_edit_time)
                    to_print = '''üìå "{}"
–í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å: {}'''.format(i, reminders[time][1])
                    bot.send_message(message.from_user.id, text=to_print, reply_markup=keyboard)


def qstn(message, f=None):
    if message.text == '–ù–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å':
        for i in look_tasks.keys():
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            key_done_task = types.InlineKeyboardButton(text='–°–¥–µ–ª–∞–Ω–æ', callback_data=i + 'done')
            key_delete_tasks = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=i + 'delete')
            keyboard.add(key_done_task, key_delete_tasks)
            key_edit_desc = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=i + 'edit_desc')
            key_edit_dl = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω', callback_data=i + 'dl')
            key_edit_imp = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å', callback_data=i + 'imp')
            keyboard.row(key_edit_desc, key_edit_dl, key_edit_imp)
            global deadlines_to_print
            to_print = '''üìå "{}"
–û–ø–∏—Å–∞–Ω–∏–µ: {}
–î–µ–¥–ª–∞–π–Ω: {}
–í–∞–∂–Ω–æ—Å—Ç—å: {}'''.format(i, look_tasks[i][0], deadlines_to_print[i], look_tasks[i][2])
            bot.send_message(message.from_user.id, text=to_print, reply_markup=keyboard)
    elif message.text == '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–µ–¥–ª–∞–π–Ω—É':
        new_list = []
        for key in look_tasks.keys():
            dl = look_tasks[key][1]
            imp = int(look_tasks[key][2])
            task_desc = (key, dl, imp)
            new_list.append(task_desc)
        for i in sorted(sorted (new_list, key=lambda x: x[2], reverse=True), key=lambda x: x[1]):
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            key_done_task = types.InlineKeyboardButton(text='–°–¥–µ–ª–∞–Ω–æ', callback_data=i[0] + 'done')
            key_delete_tasks = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=i[0] + 'delete')
            keyboard.add(key_done_task, key_delete_tasks)
            key_edit_desc = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=i[0] + 'edit_desc')
            key_edit_dl = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω', callback_data=i[0] + 'dl')
            key_edit_imp = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å', callback_data=i[0] + 'imp')
            keyboard.row(key_edit_desc, key_edit_dl, key_edit_imp)
            m = i[0]
            #global deadlines_to_print
            to_print = '''üìå "{}"
–û–ø–∏—Å–∞–Ω–∏–µ: {}
–î–µ–¥–ª–∞–π–Ω: {}
–í–∞–∂–Ω–æ—Å—Ç—å: {}'''.format(m, look_tasks[m][0], deadlines_to_print[m], look_tasks[m][2])
            bot.send_message(message.from_user.id, text=to_print, reply_markup=keyboard)
    elif message.text == '–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏':
        new_list = []
        for key in look_tasks.keys():
            dl = look_tasks[key][1]
            imp = int(look_tasks[key][2])
            task_desc = (key, dl, imp)
            new_list.append(task_desc)
        for i in sorted(sorted(new_list, key=lambda x: x[1]), key=lambda x: x[2], reverse=True):  # –∫–æ–≥–¥–∞ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è —Å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏, –±—É–¥–µ—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏, –ø–æ—Ç–æ–º –ø–æ –¥–ª
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            key_done_task = types.InlineKeyboardButton(text='–°–¥–µ–ª–∞–Ω–æ', callback_data=i[0] + 'done')
            key_delete_tasks = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=i[0] + 'delete')
            keyboard.add(key_done_task, key_delete_tasks)
            key_edit_desc = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=i[0] + 'edit_desc')
            key_edit_dl = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω', callback_data=i[0] + 'dl')
            key_edit_imp = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å', callback_data=i[0] + 'imp')
            keyboard.row(key_edit_desc, key_edit_dl, key_edit_imp)
            m = i[0]
            #global deadlines_to_print
            to_print = '''üìå "{}"
–û–ø–∏—Å–∞–Ω–∏–µ: {}
–î–µ–¥–ª–∞–π–Ω: {}
–í–∞–∂–Ω–æ—Å—Ç—å: {}'''.format(m, look_tasks[m][0], deadlines_to_print[m], look_tasks[m][2])
            bot.send_message(message.from_user.id, text=to_print, reply_markup=keyboard)

def get_new(message):
    global new
    new = message.text
    look_tasks[new] = []
    data = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥–µ–ª–∞')
    bot.register_next_step_handler(data, add_data)


def add_data(message):
    data = message.text
    global data_list
    data_list.append(data)
    keyboard = types.ReplyKeyboardMarkup(True)
    keyboard.row('–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞')
    data2 = bot.send_message(message.from_user.id, '''–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞" –Ω–∏–∂–µ.
–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º*.
–í—ã –º–æ–∂–µ—Ç–µ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è, –∞ —Ç–∞–∫–∂–µ –≥–æ–¥ - —Ç–æ–≥–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è —Ç–µ–∫—É—â–∏–π –≥–æ–¥, –∞ –≤—Ä–µ–º—è - 23:59.
–¢–æ –µ—Å—Ç—å, –µ—Å–ª–∏ –í—ã —É–∫–∞–∂–µ—Ç–µ 25.05, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω–æ–º 25.05.{} 23.59.'''.format(curr_day.year), reply_markup=keyboard)
    bot.register_next_step_handler(data2, add_data2)


def add_data2(message):
    date_s = message.text
    global data_list
    global new
    global deadlines_to_print
    if date_s == "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞":
        data_list.append(datetime.datetime(2222, 2, 22, 23, 59))  #–∫–∞–∫–æ–µ-—Ç–æ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –¥–∞–ª—ë–∫–æ–µ –±—É–¥—É—â–µ–µ –¥–ª—è –¥–µ–ª –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–æ–≤; –¥–∞—Ç—É –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
        deadlines_to_print[new] = "–ù–µ—Ç"
    else:
        is_year = 0
        for i in date_s:
            if i == ".":
                is_year += 1
        thedate = 0
        if ":" in date_s:
            if is_year == 2:
                thedate = datetime.datetime.strptime(date_s, '%d.%m.%Y %H:%S')
            else:
                thedate = datetime.datetime.strptime(date_s, '%d.%m %H:%S')
                thedate = thedate.replace(year=curr_day.year)
        else:
            if is_year == 2:
                thedate = datetime.datetime.strptime(date_s, '%d.%m.%Y')
                thedate = thedate.replace(hour=23, minute=59)
            else:
                thedate = datetime.datetime.strptime(date_s, '%d.%m')
                thedate = thedate.replace(year=curr_day.year)
                thedate = thedate.replace(hour=23, minute=59)
        data_list.append(thedate)
        deadlines_to_print[new] = "{}.{}.{} {}:{}".format(thedate.day, thedate.month, thedate.year, thedate.hour, thedate.minute)
    keyboard = types.ReplyKeyboardRemove(True)
    data3 = bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ —à–∫–∞–ª–µ 1-5, –≥–¥–µ 5 - –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–µ –¥–µ–ª–æ.', reply_markup=keyboard)
    bot.register_next_step_handler(data3, add_data3)


def add_data3(message):
    data = message.text
    global data_list
    data_list.append(data)
    global new
    look_tasks.update({new: data_list})
    # —è –ø–æ–∫–∞ –¥–µ–ª–∞–ª–∞ —Å–ª–æ–≤–∞—Ä—å "–∑–∞–¥–∞—á–∞": [–æ–ø–∏—Å–∞–Ω–∏–µ, –¥–µ–¥–ª–∞–π–Ω, –≤–∞–∂–Ω–æ—Å—Ç—å]
    # –Ω–æ –Ω–µ—Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏ —Å–ª–æ–≤–∞—Ä—å "–∑–∞–¥–∞—á–∞": {"–æ–ø–∏—Å–∞–Ω–∏–µ": –¥–∞–Ω–Ω—ã–µ, "–¥–µ–¥–ª–∞–π–Ω": –¥–∞–Ω–Ω—ã–µ, "–≤–∞–∂–Ω–æ—Å—Ç—å": –¥–∞–Ω–Ω—ã–µ}
    # –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –ª—É—á—à–µ
    data_list = []
    curr_task = {}
    bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–∏–ª :)')


def desc_edit(message):
    global look_tasks
    global thing
    help_list = look_tasks[thing]
    help_list.pop(0)
    help_list.insert(0, message.text)
    look_tasks[thing] = help_list
    thing = ''
    bot.send_message(message.from_user.id, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!")


def dl_edit(message):
    global look_tasks
    global thing2
    help_list = look_tasks[thing2]
    help_list.pop(1)
    date_s = message.text
    global deadlines_to_print
    if date_s == "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞":
        help_list.insert(1, datetime.datetime(2222, 2, 22, 23, 59)) 
        deadlines_to_print[thing2] = "–Ω–µ—Ç"
    else:
        is_year = 0
        for i in date_s:
            if i == ".":
                is_year += 1
        thedate = 0
        if ":" in date_s:
            if is_year == 2:
                thedate = datetime.datetime.strptime(date_s, '%d.%m.%Y %H:%S')
            else:
                thedate = datetime.datetime.strptime(date_s, '%d.%m %H:%S')
                thedate = thedate.replace(year=curr_day.year)
        else:
            if is_year == 2:
                thedate = datetime.datetime.strptime(date_s, '%d.%m.%Y')
                thedate = thedate.replace(hour=23, minute=59)
            else:
                thedate = datetime.datetime.strptime(date_s, '%d.%m')
                thedate = thedate.replace(year=curr_day.year)
                thedate = thedate.replace(hour=23, minute=59)
        
        deadlines_to_print[thing2] = "{}.{}.{} {}:{}".format(thedate.day, thedate.month, thedate.year, thedate.hour, thedate.minute)
        help_list.insert(1, thedate)
    keyboard = types.ReplyKeyboardRemove(True)
    
    look_tasks[thing2] = help_list
    thing2 = ''
    bot.send_message(message.from_user.id, "–î–µ–¥–ª–∞–π–Ω –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!")


def imp_edit(message):
    global look_tasks
    global thing3
    help_list = look_tasks[thing3]
    help_list.pop(2)
    help_list.insert(2, message.text)
    look_tasks[thing3] = help_list
    thing3 = ''
    bot.send_message(message.from_user.id, "–í–∞–∂–Ω–æ—Å—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    for i in list(look_tasks):
        if call.data == i + 'done':
            del look_tasks[i]
            bot.send_message(call.message.chat.id, '–í—ã –º–æ–ª–æ–¥–µ—Ü! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –¥–µ–ª–æ–º :)')
            bot.send_photo(call.message.chat.id, random.choice(image_list))
        elif call.data == i + 'delete':
            del look_tasks[i]
            bot.send_message(call.message.chat.id, '–î–µ–ª–æ —É–¥–∞–ª–µ–Ω–æ')
        elif call.data == i + 'edit_desc':
            global thing
            thing = i
            new_desc = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
            bot.register_next_step_handler(new_desc, desc_edit)
        elif call.data == i + 'dl':
            global thing2
            thing2 = i
            keyboard = types.ReplyKeyboardMarkup(True)
            keyboard.row('–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞')
            new_dl = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=keyboard)
            bot.register_next_step_handler(new_dl, dl_edit)
        elif call.data == i + 'imp':
            global thing3
            thing3 = i
            new_imp = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ (1-5)')
            bot.register_next_step_handler(new_imp, imp_edit)
    for time in reminders_time_list:
        for i in range(len(reminders[time][0])):
            global old_desc_rem_ind
            global old_time_rem
            old_time_rem = time
            old_desc_rem_ind = i
            if call.data == reminders[time][0][i] + "del_rem":
                reminders[time][0].remove(reminders[time][0][i])
                if len(reminders[time][0]) == 0:
                    del reminders[time]
                    reminders_time_list.remove(time)
                bot.send_message(call.message.chat.id, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
            elif call.data == reminders[time][0][i] + "ed_desc_rem":
                new_desc_rem = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, –æ —á–µ–º –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å')
                bot.register_next_step_handler(new_desc_rem, desc_rem_edit)
            elif call.data == reminders[time][0][i] + "ed_time_rem":
                new_time_rem = bot.send_message(call.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
                bot.register_next_step_handler(new_time_rem, time_rem_edit)


def desc_rem_edit(message):
    global reminders
    reminders[old_time_rem][0][old_desc_rem_ind] = message.text
    bot.send_message(message.from_user.id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!")

def time_rem_edit(message):
    global reminders
    global reminders_time_list
    new_time = message.text
    is_year = 0
    for i in new_time:
        if i == ".":
            is_year += 1
    thedate = 0
    if is_year == 2:
        thedate = datetime.datetime.strptime(new_time, '%d.%m.%Y %H:%M')
    else:
        thedate = datetime.datetime.strptime(new_time, '%d.%m %H:%M')
        thedate = thedate.replace(year=curr_day.year)
    reminders_time_list.append(thedate)
    reminders[thedate] = reminders[old_time_rem]
    reminders[thedate][1] = "{}.{}.{} {}:{}".format(thedate.day, thedate.month, thedate.year, thedate.hour, thedate.minute)
    reminders_time_list.remove(old_time_rem)
    del reminders[old_time_rem]
    bot.send_message(message.from_user.id, "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!")

def add_reminder(message):
    global curr_reminder
    curr_reminder = message.text
    time_to_remind = bot.send_message(message.from_user.id, '''–ö–æ–≥–¥–∞ –í—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –í–∞–º –æ–± —ç—Ç–æ–º –Ω–∞–ø–æ–º–Ω–∏–ª?
–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º*
–ì–æ–¥ –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å, —Ç–æ–≥–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π.''')
    bot.register_next_step_handler(time_to_remind, reminder_added)

def reminder_added(message):
    global reminders
    time_to_remind = message.text
    is_year = 0
    for i in time_to_remind:
        if i == ".":
            is_year += 1
    thedate = 0
    if is_year == 2:
        thedate = datetime.datetime.strptime(time_to_remind, '%d.%m.%Y %H:%M')
    else:
        thedate = datetime.datetime.strptime(time_to_remind, '%d.%m %H:%M')
        thedate = thedate.replace(year=curr_day.year)
    if reminders.get(thedate, None) is None:
        reminders[thedate] = ([], "{}.{}.{} {}:{}".format(thedate.day, thedate.month, thedate.year, thedate.hour, thedate.minute))
    reminders[thedate][0].append(curr_reminder)
    reminders_time_list.append(thedate)
    reminders_time_list.sort()
    bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ! :)')


bot.polling(none_stop=True)
